###
# Database connection settings
###
database.hostname=localhost
database.port=5432
database.user=postgres
database.password=postgres
topic.prefix=postgres
database.dbname=postgres
#database.include=public

###
# PostgreSQL Debezium connector configuration properties
###
# https://debezium.io/documentation/reference/connectors/postgresql.html#postgresql-connector-properties

# plugin.name: The name of the PostgreSQL logical decoding plug-in installed on the PostgreSQL server.
# Supported values are decoderbufs, wal2json, wal2json_rds, wal2json_streaming, wal2json_rds_streaming and pgoutput.
# If you are using a wal2json plug-in and transactions are very large, 
# the JSON batch event that contains all transaction changes might not fit into the hard-coded memory buffer, 
# which has a size of 1 GB. In such cases, switch to a streaming plug-in, by setting the plugin-name property to wal2json_streaming or wal2json_rds_streaming. With a streaming plug-in, PostgreSQL sends the connector a separate message for each change in a transaction.
# 
# https://debezium.io/documentation/reference/connectors/postgresql.html#postgresql-output-plugin
# PostgreSQL 10+ supports "pgoutput" for logical replication stream support.
plugin.name=pgoutput

# database.include.list: An optional, comma-separated list of regular expressions 
# that match names of schemas for which you want to capture changes. 
# Any schema name not included in schema.include.list is excluded from having its changes captured. 
# By default, all non-system schemas have their changes captured. 
# Do not also set the schema.exclude.list property.
database.include.list=postgres

# schema.include.list: An optional, comma-separated list of regular expressions 
# that match names of schemas for which you want to capture changes. 
# Any schema name not included in schema.include.list is excluded from having its changes captured. 
# By default, all non-system schemas have their changes captured. 
# Do not also set the schema.exclude.list property.
#
schema.include.list=change_data_capture_example

# table.include.list: An optional, comma-separated list of regular expressions that match fully-qualified table identifiers 
# for tables whose changes you want to capture. 
# Any table not included in table.include.list does not have its changes captured. 
# Each identifier is of the form schemaName.tableName. 
# By default, the connector captures changes in every non-system table in each schema 
# whose changes are being captured. 
# Do not also set the table.exclude.list property.
#
#table.include.list=change_data_capture_example.product

# column.include.list: An optional, comma-separated list of regular expressions 
# that match the fully-qualified names of columns that should be included in change event record values. 
# Fully-qualified names for columns are of the form schemaName.tableName.columnName. 
# Do not also set the column.exclude.list property.
#column.include.list=change_data_capture_example.product.NAME,change_data_capture_example.product.DESCRIPTION

###
# Debezium configuration properties
###
# https://debezium.io/documentation/reference/1.6/development/engine.html#engine-properties

# name: Unique name for the connector instance.
name=change-data-capture-example

# connector.class: The name of the Java class for the connector, e.g ...PostgresConnector for the PostgreSQL connector.
connector.class=io.debezium.connector.postgresql.PostgresConnector

# offset.storage: The name of the Java class that is responsible for persistence of connector offsets. 
# It must implement OffsetBackingStore interface.
offset.storage=org.apache.kafka.connect.storage.MemoryOffsetBackingStore
